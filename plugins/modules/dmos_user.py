#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright 2020 Datacom (Teracom Telematica S/A) <datacom.com.br>
# GNU General Public License v3.0+
# (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

#############################################
#                WARNING                    #
#############################################
#
# This file is auto generated by the resource
#   module builder playbook.
#
# Do not edit this file manually.
#
# Changes to this file will be over written
#   by the resource module builder.
#
# Changes should be made in the model used to
#   generate this file or in the resource module
#   builder template.
#
#############################################

"""
The module file for dmos_user
"""

from __future__ import absolute_import, division, print_function
__metaclass__ = type

ANSIBLE_METADATA = {
    'metadata_version': '1.1',
    'status': ['preview'],
    'supported_by': 'community'
}

DOCUMENTATION = """
---
module: dmos_user
version_added: '2.9'
short_description: Manages User attributes on DATACOM DmOS devices.
description:
  - This module provides a declarative management of User
    on DATACOM DmOS devices.
author:
  - Vinicius Kleinubing (@vgkleinubing) <vinicius.grubel@datacom.com.br>
  - LDS Labs (@lds-labs)
notes:
  - Tested against DmOS version 5.2.0.
options:
  config:
    description: The DmOS user configuration.
    type: list
    elements: dict
    suboptions:
      name:
        description: User name.
        type: str
      alias:
        description: Command alias configuration.
        type: list
        elements: dict
        suboptions:
          name:
            description: Name of the command alias.
            type: str
          expansion:
            description: DmOS Command.
            type: str
      description:
        description: User description.
        type: str
      session:
        description: User specific default CLI session parameters.
        type: dict
        suboptions:
          complete_on_space:
            description: Enable/disable completion on space.
            type: bool
          devtools:
            description: Enable/disable development tools.
            type: bool
          display_level:
            description: Max depth to show when displaying configuration.
            type: int
          history:
            description: History size.
            type: int
          idle_timeout:
            description: CLI idle-timeout in seconds.
            type: int
          ignore_leading_space:
            description: Ignore leading whitespace.
            type: bool
          paginate:
            description: Paginate output from CLI commands.
            type: bool
          show_defaults:
            description: Show default values when showing the configuration.
            type: bool
  state:
    description:
    - The state the configuration should be left in.
    type: str
    choices:
    - merged
    - replaced
    - overridden
    - deleted
    default: merged
"""
EXAMPLES = """
# configure completion on space, idle_timeout and paginate to false

dmos_user:
  config:
    - name: sample_user
      description: sample user config
      session:
        complete_on_space: true
        idle_timeout: 60
        paginate: false


"""
RETURN = """
before:
  description: The configuration prior to the model invocation.
  returned: always
  type: list
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
after:
  description: The resulting configuration model invocation.
  returned: when changed
  type: list
  sample: >
    The configuration returned will always be in the same format
     of the parameters above.
commands:
  description: The set of commands pushed to the remote device.
  returned: always
  type: list
  sample: ['command 1', 'command 2', 'command 3']
"""


from ansible.module_utils.basic import AnsibleModule
from ansible_collections.datacom.dmos.plugins.module_utils.network.dmos.argspec.user.user import UserArgs
from ansible_collections.datacom.dmos.plugins.module_utils.network.dmos.config.user.user import User


def main():
    """
    Main entry point for module execution

    :returns: the result form module invocation
    """
    module = AnsibleModule(argument_spec=UserArgs.argument_spec,
                           supports_check_mode=True)

    result = User(module).execute_module()
    module.exit_json(**result)


if __name__ == '__main__':
    main()
